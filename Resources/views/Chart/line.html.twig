{# Chart variables format:

    "options":
        "name": "chart_name",
        "data_schema" => array(
            "label" => array("field_name" => "name", "label" => "First Name", "type" => "string"),
            "value" => array("field_name" => "salary", "label" => "Salary", "type" => "money"),
        ),
        "settings" => array(
            "foo" => "bar"
        ),
    "config": { /** Chart config from in format of oro/chart.yml */ }
    "data": [
        {"label": "In progress", "value": 1000},
        {"label": "Lost", "value": 500},
        {"label": "Won", "value": 10000},
    ]

#}
{% if data|length > 0 %}
    {% set containerId = "chart-container-" ~ random() %}
    <div class="chart-container">
        <div class="clearfix">
            <div id="{{ containerId }}-chart" class="bar-chart chart pull-left"></div>
        </div>
    </div>

    <script type="text/javascript">
    require(['jquery', 'oroui/js/layout', 'flotr2', 'orochart/js/data_formatter'],
            function ($, layout, Flotr, dataFormatter) {
                $(function () {
                    var $chart = $('#{{ containerId }}-chart');
                    var $widgetContent = $chart.parents('.chart-container').parent();
                    var setChartSize = function () {
                        var chartWidth = Math.round($widgetContent.width() * 0.9);
                        if (chartWidth != $chart.width()) {
                            $chart.width(chartWidth);
                            $chart.height(Math.min(Math.round(chartWidth * 0.4), 350));
                            return true;
                        }
                        return false;
                    };
                    var setChartContainerSize = function () {
                        $chart.closest('.clearfix').width($chart.width());
                    };
                    var drawChart = function () {
                        var xFormat = {{ options.data_schema.label.type|json_encode|raw }};
                        var yFormat = {{ options.data_schema.value.type|json_encode|raw }};
                        if (!$chart.get(0).clientWidth) {
                            return;
                        }

                        var rawData = {{ data|json_encode|raw }};

                        // single-multi bc
                        if (_.isArray(rawData)) {
                            rawData = {data: rawData};
                        }

                        if (dataFormatter.isValueNumerical(xFormat)) {
                            var sort = function (rawData) {
                                rawData.sort(function (first, second) {
                                    if (first.label == null) {
                                        return -1;
                                    }
                                    if (second.label == null) {
                                        return 1;
                                    }
                                    var firstLabel = dataFormatter.parseValue(first.label, xFormat);
                                    var secondLabel = dataFormatter.parseValue(second.label, xFormat);
                                    return firstLabel - secondLabel;
                                });
                            };

                            _.each(rawData, sort);
                        }

                        var getXLabel = function (data) {
                            var label = dataFormatter.formatValue(data, xFormat);
                            if (label === null) {
                                var number = parseInt(data);
                                if (rawData.length > number) {
                                    label = rawData[number]['label'] === null ? '{{ 'N/A'|trans }}' : rawData[number]['label'];
                                } else {
                                    label = '';
                                }
                            }
                            return label;
                        };

                        var getYLabel = function (data) {
                            var label = dataFormatter.formatValue(data, yFormat);
                            if (label === null) {
                                var number = parseInt(data);
                                if (rawData.length > number) {
                                    label = rawData[data]['value'] === null ? '{{ 'N/A'|trans }}' : rawData[data]['value'];
                                } else {
                                    label = '';
                                }
                            }
                            return label;
                        };

                        var connectDots = {{ options.settings.connect_dots_with_line|json_encode|raw }};
                        var colors = {{ config.default_settings.chartColors|json_encode|raw }};

                        var makeChart = function (rawData, count) {
                            var chartData = [];
                            var yMax = null, yMin = null, xMax = null, xMin = null;
                            var prevYValue = 0;

                            for (var i in rawData) {
                                var yValue = dataFormatter.parseValue(rawData[i]['value'], yFormat);
                                yValue = yValue === null ? parseInt(i) : yValue;
                                yValue = yValue + prevYValue;
                                var xValue = dataFormatter.parseValue(rawData[i]['label'], xFormat);
                                xValue = xValue === null ? parseInt(i) : xValue;
                                if (xMax === null) {
                                    xMax = xValue;
                                    yMax = yValue;
                                    yMin = yValue;
                                    xMin = xValue;
                                }
                                xMax = xMax < xValue ? xValue : xMax;
                                xMin = xMin > xValue ? xValue : xMin;
                                yMax = yMax < yValue ? yValue : yMax;
                                yMin = yMin > yValue ? yValue : yMin;

                                var item = [xValue, yValue];
                                chartData.push(item);
                                prevYValue = yValue;
                            }
                            var deltaX = xMax - xMin;
                            var deltaY = yMax - yMin;
                            var xStep = (deltaX > 0 ? deltaX / rawData.length : 1);
                            var yStep = (deltaY > 0 ? deltaY / rawData.length : 1);
                            xMax += xStep;
                            yMax += yStep;
                            xMin -= xStep;
                            yMin -= yStep;

                            var chart = {
                                data: chartData,
                                color: colors[Math.ceil(colors.length/count)],
                                markers: {
                                    show: true,
                                    position: 'ct',
                                    labelFormatter: function (pointData) {
                                        return getYLabel(pointData.y);
                                    }
                                },
                                points: {
                                    show: !connectDots
                                }
                            };

                            return {
                                chart: chart,
                                axis: {
                                    xMax: xMax,
                                    yMax: yMax,
                                    xMin: xMin,
                                    yMin: yMin
                                }
                            }
                        };

                        var xMax = [], yMax = [], xMin = [], yMin = [], charts = [];
                        var count = 0;

                        _.each(rawData, function (rawData, key) {
                            var result = makeChart(rawData, count);
                            count++;

                            charts.push(result.chart);
                            xMax.push(result.axis.xMax);
                            yMax.push(result.axis.yMax);
                            xMin.push(result.axis.xMin);
                            yMin.push(result.axis.yMin);
                        });

                        Flotr.draw(
                                $chart.get(0),
                                charts,
                                {
                                    colors: colors,
                                    fontColor: {{ options.settings.chartFontColor|json_encode|raw }},
                                    fontSize: {{ options.settings.chartFontSize|json_encode|raw }},
                                    lines: {
                                        show: connectDots
                                    },
                                    mouse: {
                                        track: true,
                                        relative: true,
                                        trackFormatter: function (pointData) {
                                            return getXLabel(pointData.x) + ': ' + getYLabel(pointData.y);
                                        }
                                    },
                                    yaxis: {
                                        max: _.max(yMax),
                                        min: _.min(yMin),
                                        tickFormatter: function (y) {
                                            return getYLabel(y);
                                        },
                                        title: {{ options.data_schema.value.label|trans|json_encode|raw }}
                                    },
                                    xaxis: {
                                        max: _.max(xMax),
                                        min: _.min(xMin),
                                        tickFormatter: function (x) {
                                            return getXLabel(x);
                                        },
                                        title: {{ options.data_schema.label.label|trans|json_encode|raw }}
                                    },
                                    HtmlText: false,
                                    grid: {
                                        verticalLines: false
                                    },
                                    legend: {
                                        show: true,
                                        noColumns: 1,
                                        labelFormatter: null,
                                        labelBoxBorderColor: '#ccc',
                                        container: null,
                                        position: 'ne',
                                        margin: 50,
                                        backgroundColor: null,
                                        backgroundOpacity: 0.85
                                    }
                                }
                        );
                    };

                    layout.onPageRendered(function () {
                        setChartSize();
                        drawChart();
                        setChartContainerSize();
                    });

                    $(window).resize(function () {
                        if (setChartSize()) {
                            drawChart();
                            setChartContainerSize();
                        }
                    });
                });
            });
    </script>
{% else %}
    <div class="clearfix no-data">
        <span>{{ 'oro.dashboard.no_data_found'|trans }}</span>
    </div>
{% endif %}

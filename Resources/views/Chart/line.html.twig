{# Chart variables format:

    "options":
        "name": "chart_name",
        "data_schema" => array(
            "label" => array("fieldName" => "name", "label" => "oro.xxx.firstName"),
            "value" => array("fieldName" => "salary", "label" => "oro.xxx.salary"),
        ),
        "settings" => array(
            "foo" => "bar"
        ),
    "config": { /** Chart config from in format of oro/chart.yml */ }
    "data": [
        {"label": "In progress", "value": 1000},
        {"label": "Lost", "value": 500},
        {"label": "Won", "value": 10000},
    ]

#}
{% if data|length>0  %}
{% set widgetId = random() %}
<div class="chart-container">
    <div class="clearfix">
        <div id="{{ widgetId }}-chart" class="bar-chart chart pull-left"></div>
    </div>
</div>
<script type="text/javascript">
    require(['jquery', 'oroui/js/layout', 'flotr2', 'oro/chart/data_formatter'],
            function($, layout, Flotr, dataFormatter){
                $(function () {
                    var $chart = $('#{{ widgetId }}-chart');
                    var $widgetContent = $chart.parents('.chart-container').parent();
                    var setChartSize = function () {
                        var chartWidth = Math.round($widgetContent.width() * 0.9);
                        if (chartWidth != $chart.width()) {
                            $chart.width(chartWidth);
                            $chart.height(Math.min(Math.round(chartWidth * 0.4), 350));
                            return true;
                        }
                        return false;
                    };
                    var setChartContainerSize = function () {
                        $chart.closest('.clearfix').width($chart.width());
                    };
                    var drawChart = function () {

                        var yFormat = 'integer';//todo: use data_schema value format
                        var xFormat = 'money';//todo: use data_schema label format

                        if (!$chart.get(0).clientWidth) {
                            return;
                        }
                        var rawData = {{ data|json_encode|raw }}
                        var connectDots = {{ options.settings.connect_dots_with_line|json_encode|raw }};
                        var colors = {{ config.default_settings.chartColors|json_encode|raw }};
                        var chartData = [];
                        var yMax = null;
                        var xMax = null;
                        for(var i in rawData){
                            var yValue = dataFormatter.clearValue(rawData[i]['value'], yFormat);
                            yValue = yValue === null ? parseInt(i) : yValue;
                            var xValue = dataFormatter.clearValue(rawData[i]['label'], xFormat);
                            xValue = xValue === null ? parseInt(i) : xValue;
                            if(xMax === null){
                                xMax = xValue;
                            }
                            if(yMax === null){
                                yMax = yValue;
                            }
                            if(xMax < xValue){
                                xMax = xValue;
                            }
                            if(yMax < yValue){
                                yMax = yValue;
                            }
                            chartData.push([xValue, yValue]);
                        }
                        xMax += dataFormatter.clearValue(xMax/10, xFormat);
                        yMax += dataFormatter.clearValue(yMax/10, yFormat);

                        var chart = {
                            data: chartData,
                            color: colors[0],
                            markers: {
                                show: true,
                                position: 'ct',
                                labelFormatter: function (data) {
                                    var label = dataFormatter.formatLabel(data.y, yFormat);
                                    if (label === null) {
                                        label = rawData[data.y]['value'];
                                    }
                                    return label;
                                }
                            },
                            points: {
                                show: !connectDots
                            }
                        };
                        Flotr.draw(
                                $chart.get(0),
                                [chart],
                                {
                                    colors: {{ options.settings.chartColors|json_encode|raw }},
                                    fontColor: {{ options.settings.chartFontColor|json_encode|raw }},
                                    fontSize: {{ options.settings.chartFontSize|json_encode|raw }},
                                    lines : {
                                        show : connectDots
                                    },
                                    mouse : {
                                        track : true,
                                        relative : true,
                                        trackFormatter: function (data) {
                                            return  dataFormatter.formatLabel(data.x, xFormat)+
                                                    ': ' + dataFormatter.formatLabel(data.y, yFormat);
                                        }
                                    },
                                    yaxis: {
                                        max: yMax,
                                        tickFormatter: function (y) {
                                            var label = dataFormatter.formatLabel(y, yFormat);
                                            if (label === null) {
                                                label = rawData[parseInt(y)]['value'];
                                            }
                                            return label;
                                        }
                                    },
                                    xaxis: {
                                        max: xMax,
                                        tickFormatter: function (x) {
                                            var label = dataFormatter.formatLabel(x, xFormat);
                                            if (label === null) {
                                                label = rawData[parseInt(x)]['value'];
                                            }
                                            return label;
                                        }
                                    },
                                    grid: {
                                        verticalLines : false
                                    }
                                }
                        );
                    };

                    layout.onPageRendered(function () {
                        setChartSize();
                        drawChart();
                        setChartContainerSize();
                    });

                    $(window).resize(function () {
                        if (setChartSize()) {
                            drawChart();
                            setChartContainerSize();
                        }
                    });
                });
            });
</script>
{% else %}
    <div class="clearfix no-data">
        <span>{{ 'oro.dashboard.no_data_found'|trans }}</span>
    </div>
{% endif %}

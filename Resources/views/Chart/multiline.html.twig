{# Chart variables format:

    "options":
        "name": "chart_name",
        "data_schema" => array(
            "label" => array("field_name" => "name", "label" => "First Name", "type" => "string"),
            "value" => array("field_name" => "salary", "label" => "Salary", "type" => "money"),
        ),
        "settings" => array(
            "foo" => "bar"
        ),
    "config": { /** Chart config from in format of oro/chart.yml */ }
    "data": [
        {"label": "In progress", "value": 1000},
        {"label": "Lost", "value": 500},
        {"label": "Won", "value": 10000},
    ]

#}
{% if data|length > 0  %}
    {% set containerId = "chart-container-" ~ random() %}
    <div class="chart-container">
        <div class="clearfix">
            <div id="{{ containerId }}-chart" class="multiline-chart chart pull-left"></div>
        </div>
    </div>

    <script type="text/javascript">
        require(['jquery', 'oroui/js/layout', 'flotr2', 'orochart/js/data_formatter'],
                function($, layout, Flotr, dataFormatter){
                    $(function () {
                        var $chart = $('#{{ containerId }}-chart');
                        var $widgetContent = $chart.parents('.chart-container').parent();
                        var setChartSize = function () {
                            var chartWidth = Math.round($widgetContent.width() * 0.9);
                            if (chartWidth != $chart.width()) {
                                $chart.width(chartWidth);
                                $chart.height(Math.min(Math.round(chartWidth * 0.4), 350));
                                return true;
                            }
                            return false;
                        };
                        var setChartContainerSize = function () {
                            $chart.closest('.clearfix').width($chart.width());
                        };
                        var drawChart = function () {
                            var xFormat = {{ options.data_schema.label.type|json_encode|raw }};
                            var yFormat = {{ options.data_schema.value.type|json_encode|raw }};
                            if (!$chart.get(0).clientWidth) {
                                return;
                            }

                            var rawData = {{ data|json_encode|raw }};

                            if (dataFormatter.isValueNumerical(xFormat)) {
                                var sort = function (rawData) {
                                    rawData.sort(function (first, second) {
                                        if (first.label == null) {
                                            return -1;
                                        }
                                        if (second.label == null) {
                                            return 1;
                                        }
                                        var firstLabel = dataFormatter.parseValue(first.label, xFormat);
                                        var secondLabel = dataFormatter.parseValue(second.label, xFormat);
                                        return firstLabel - secondLabel;
                                    });
                                };

                                _.each(rawData, sort);
                            }

                            var connectDots = {{ options.settings.connect_dots_with_line|json_encode|raw }};
                            var colors = {{ config.default_settings.chartColors|json_encode|raw }};

                            var count = 0;
                            var charts = [];

                            var getXLabel = function(data) {
                                var label = dataFormatter.formatValue(data, xFormat);
                                if (label === null) {
                                    var number = parseInt(data);
                                    if (rawData.length > number) {
                                        label = rawData[number]['label'] === null ? '{{ 'N/A'|trans }}'  : rawData[number]['label'];
                                    } else {
                                        label = '';
                                    }
                                }
                                return label;
                            };
                            var getYLabel = function(data) {
                                var label = dataFormatter.formatValue(data, yFormat);
                                if (label === null) {
                                    var number = parseInt(data);
                                    if (rawData.length > number) {
                                        label = rawData[data]['value'] === null ? '{{ 'N/A'|trans }}' : rawData[data]['value'];
                                    } else {
                                        label = '';
                                    }
                                }
                                return label;
                            };

                            var makeChart = function (rawData, count, key) {
                                var chartData = [];

                                for (var i in rawData) {
                                    var yValue = dataFormatter.parseValue(rawData[i]['value'], yFormat);
                                    yValue = yValue === null ? parseInt(i) : yValue;
                                    var xValue = dataFormatter.parseValue(rawData[i]['label'], xFormat);
                                    xValue = xValue === null ? parseInt(i) : xValue;

                                    var item = [xValue, yValue];
                                    chartData.push(item);
                                }

                                return {
                                    label: key,
                                    data: chartData,
                                    color: colors[count % colors.length],
                                    markers: {
                                        show: false
                                    },
                                    points: {
                                        show: !connectDots
                                    }
                                };
                            };

                            _.each(rawData, function (rawData, key) {
                                var result = makeChart(rawData, count, key);
                                count++;

                                charts.push(result);
                            });

                            Flotr.draw(
                                $chart.get(0),
                                charts,
                                {
                                    colors: colors,
                                    fontColor: {{ options.settings.chartFontColor|json_encode|raw }},
                                    fontSize: {{ options.settings.chartFontSize|json_encode|raw }},
                                    lines : {
                                        show : connectDots
                                    },
                                    mouse : {
                                        track : true,
                                        relative : true,
                                        trackFormatter: function (pointData) {
                                            return   getXLabel(pointData.x) + ': ' + getYLabel(pointData.y);
                                        }
                                    },
                                    yaxis: {
                                        autoscale: true,
                                        autoscaleMargin: 1,
                                        tickFormatter: function (y) {
                                            return getYLabel(y);
                                        },
                                        title: {{ options.data_schema.value.label|json_encode|raw }}
                                    },
                                    xaxis: {
                                        autoscale: true,
                                        autoscaleMargin: 0,
                                        labelsAngle: 45,
                                        tickFormatter: function (x) {
                                            return getXLabel(x);
                                        },
                                        title: {{ options.data_schema.label.label|json_encode|raw }}
                                    },
                                    HtmlText : false,
                                    grid: {
                                        verticalLines : false
                                    },
                                    legend: {
                                        show: true,
                                        noColumns: 1,
                                        position: 'nw'
                                    }
                                }
                            );
                        };

                        layout.onPageRendered(function () {
                            setChartSize();
                            drawChart();
                            setChartContainerSize();
                        });

                        $(window).resize(function () {
                            if (setChartSize()) {
                                drawChart();
                                setChartContainerSize();
                            }
                        });
                    });
                });
    </script>
{% else %}
    <div class="container-fluid grid-container-parent">
        <div class="grid-container">
            <div class="clearfix no-data">
                <span>{{ 'oro.dashboard.no_data_found'|trans }}</span>
            </div>
        </div>
    </div>
{% endif %}
